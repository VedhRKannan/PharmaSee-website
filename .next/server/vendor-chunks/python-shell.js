"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/python-shell";
exports.ids = ["vendor-chunks/python-shell"];
exports.modules = {

/***/ "(rsc)/./node_modules/python-shell/index.js":
/*!********************************************!*\
  !*** ./node_modules/python-shell/index.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PythonShell = exports.NewlineTransformer = exports.PythonShellErrorWithLogs = exports.PythonShellError = void 0;\r\nconst events_1 = __webpack_require__(/*! events */ \"events\");\r\nconst child_process_1 = __webpack_require__(/*! child_process */ \"child_process\");\r\nconst os_1 = __webpack_require__(/*! os */ \"os\");\r\nconst path_1 = __webpack_require__(/*! path */ \"path\");\r\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\r\nconst fs_1 = __webpack_require__(/*! fs */ \"fs\");\r\nconst util_1 = __webpack_require__(/*! util */ \"util\");\r\nfunction toArray(source) {\r\n    if (typeof source === 'undefined' || source === null) {\r\n        return [];\r\n    }\r\n    else if (!Array.isArray(source)) {\r\n        return [source];\r\n    }\r\n    return source;\r\n}\r\n/**\r\n * adds arguments as properties to obj\r\n */\r\nfunction extend(obj, ...args) {\r\n    Array.prototype.slice.call(arguments, 1).forEach(function (source) {\r\n        if (source) {\r\n            for (let key in source) {\r\n                obj[key] = source[key];\r\n            }\r\n        }\r\n    });\r\n    return obj;\r\n}\r\n/**\r\n * gets a random int from 0-10000000000\r\n */\r\nfunction getRandomInt() {\r\n    return Math.floor(Math.random() * 10000000000);\r\n}\r\nconst execPromise = (0, util_1.promisify)(child_process_1.exec);\r\nclass PythonShellError extends Error {\r\n}\r\nexports.PythonShellError = PythonShellError;\r\nclass PythonShellErrorWithLogs extends PythonShellError {\r\n}\r\nexports.PythonShellErrorWithLogs = PythonShellErrorWithLogs;\r\n/**\r\n * Takes in a string stream and emits batches seperated by newlines\r\n */\r\nclass NewlineTransformer extends stream_1.Transform {\r\n    _transform(chunk, encoding, callback) {\r\n        let data = chunk.toString();\r\n        if (this._lastLineData)\r\n            data = this._lastLineData + data;\r\n        const lines = data.split(os_1.EOL);\r\n        this._lastLineData = lines.pop();\r\n        //@ts-ignore this works, node ignores the encoding if it's a number\r\n        lines.forEach(this.push.bind(this));\r\n        callback();\r\n    }\r\n    _flush(done) {\r\n        if (this._lastLineData)\r\n            this.push(this._lastLineData);\r\n        this._lastLineData = null;\r\n        done();\r\n    }\r\n}\r\nexports.NewlineTransformer = NewlineTransformer;\r\n/**\r\n * An interactive Python shell exchanging data through stdio\r\n * @param {string} script    The python script to execute\r\n * @param {object} [options] The launch options (also passed to child_process.spawn)\r\n * @param [stdoutSplitter] Optional. Splits stdout into chunks, defaulting to splitting into newline-seperated lines\r\n * @param [stderrSplitter] Optional. splits stderr into chunks, defaulting to splitting into newline-seperated lines\r\n * @constructor\r\n */\r\nclass PythonShell extends events_1.EventEmitter {\r\n    /**\r\n     * spawns a python process\r\n     * @param scriptPath path to script. Relative to current directory or options.scriptFolder if specified\r\n     * @param options\r\n     * @param stdoutSplitter Optional. Splits stdout into chunks, defaulting to splitting into newline-seperated lines\r\n     * @param stderrSplitter Optional. splits stderr into chunks, defaulting to splitting into newline-seperated lines\r\n     */\r\n    constructor(scriptPath, options, stdoutSplitter = null, stderrSplitter = null) {\r\n        super();\r\n        /**\r\n         * returns either pythonshell func (if val string) or custom func (if val Function)\r\n         */\r\n        function resolve(type, val) {\r\n            if (typeof val === 'string') {\r\n                // use a built-in function using its name\r\n                return PythonShell[type][val];\r\n            }\r\n            else if (typeof val === 'function') {\r\n                // use a custom function\r\n                return val;\r\n            }\r\n        }\r\n        if (scriptPath.trim().length == 0)\r\n            throw Error(\"scriptPath cannot be empty! You must give a script for python to run\");\r\n        let self = this;\r\n        let errorData = '';\r\n        events_1.EventEmitter.call(this);\r\n        options = extend({}, PythonShell.defaultOptions, options);\r\n        let pythonPath;\r\n        if (!options.pythonPath) {\r\n            pythonPath = PythonShell.defaultPythonPath;\r\n        }\r\n        else\r\n            pythonPath = options.pythonPath;\r\n        let pythonOptions = toArray(options.pythonOptions);\r\n        let scriptArgs = toArray(options.args);\r\n        this.scriptPath = (0, path_1.join)(options.scriptPath || '', scriptPath);\r\n        this.command = pythonOptions.concat(this.scriptPath, scriptArgs);\r\n        this.mode = options.mode || 'text';\r\n        this.formatter = resolve('format', options.formatter || this.mode);\r\n        this.parser = resolve('parse', options.parser || this.mode);\r\n        // We don't expect users to ever format stderr as JSON so we default to text mode\r\n        this.stderrParser = resolve('parse', options.stderrParser || 'text');\r\n        this.terminated = false;\r\n        this.childProcess = (0, child_process_1.spawn)(pythonPath, this.command, options);\r\n        ['stdout', 'stdin', 'stderr'].forEach(function (name) {\r\n            self[name] = self.childProcess[name];\r\n            self.parser && self[name] && self[name].setEncoding(options.encoding || 'utf8');\r\n        });\r\n        // Node buffers stdout&stderr in batches regardless of newline placement\r\n        // This is troublesome if you want to recieve distinct individual messages\r\n        // for example JSON parsing breaks if it recieves partial JSON\r\n        // so we use newlineTransformer to emit each batch seperated by newline\r\n        if (this.parser && this.stdout) {\r\n            if (!stdoutSplitter)\r\n                stdoutSplitter = new NewlineTransformer();\r\n            // note that setting the encoding turns the chunk into a string\r\n            stdoutSplitter.setEncoding(options.encoding || 'utf8');\r\n            this.stdout.pipe(stdoutSplitter).on('data', (chunk) => {\r\n                this.emit('message', self.parser(chunk));\r\n            });\r\n        }\r\n        // listen to stderr and emit errors for incoming data\r\n        if (this.stderrParser && this.stderr) {\r\n            if (!stderrSplitter)\r\n                stderrSplitter = new NewlineTransformer();\r\n            // note that setting the encoding turns the chunk into a string\r\n            stderrSplitter.setEncoding(options.encoding || 'utf8');\r\n            this.stderr.pipe(stderrSplitter).on('data', (chunk) => {\r\n                this.emit('stderr', self.stderrParser(chunk));\r\n            });\r\n        }\r\n        if (this.stderr) {\r\n            this.stderr.on('data', function (data) {\r\n                errorData += '' + data;\r\n            });\r\n            this.stderr.on('end', function () {\r\n                self.stderrHasEnded = true;\r\n                terminateIfNeeded();\r\n            });\r\n        }\r\n        else {\r\n            self.stderrHasEnded = true;\r\n        }\r\n        if (this.stdout) {\r\n            this.stdout.on('end', function () {\r\n                self.stdoutHasEnded = true;\r\n                terminateIfNeeded();\r\n            });\r\n        }\r\n        else {\r\n            self.stdoutHasEnded = true;\r\n        }\r\n        this.childProcess.on('error', function (err) {\r\n            self.emit('error', err);\r\n        });\r\n        this.childProcess.on('exit', function (code, signal) {\r\n            self.exitCode = code;\r\n            self.exitSignal = signal;\r\n            terminateIfNeeded();\r\n        });\r\n        function terminateIfNeeded() {\r\n            if (!self.stderrHasEnded || !self.stdoutHasEnded || (self.exitCode == null && self.exitSignal == null))\r\n                return;\r\n            let err;\r\n            if (self.exitCode && self.exitCode !== 0) {\r\n                if (errorData) {\r\n                    err = self.parseError(errorData);\r\n                }\r\n                else {\r\n                    err = new PythonShellError('process exited with code ' + self.exitCode);\r\n                }\r\n                err = extend(err, {\r\n                    executable: pythonPath,\r\n                    options: pythonOptions.length ? pythonOptions : null,\r\n                    script: self.scriptPath,\r\n                    args: scriptArgs.length ? scriptArgs : null,\r\n                    exitCode: self.exitCode\r\n                });\r\n                // do not emit error if only a callback is used\r\n                if (self.listeners('pythonError').length || !self._endCallback) {\r\n                    self.emit('pythonError', err);\r\n                }\r\n            }\r\n            self.terminated = true;\r\n            self.emit('close');\r\n            self._endCallback && self._endCallback(err, self.exitCode, self.exitSignal);\r\n        }\r\n        ;\r\n    }\r\n    /**\r\n     * checks syntax without executing code\r\n     * @returns rejects promise w/ string error output if syntax failure\r\n     */\r\n    static checkSyntax(code) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const randomInt = getRandomInt();\r\n            const filePath = (0, os_1.tmpdir)() + path_1.sep + `pythonShellSyntaxCheck${randomInt}.py`;\r\n            const writeFilePromise = (0, util_1.promisify)(fs_1.writeFile);\r\n            return writeFilePromise(filePath, code).then(() => {\r\n                return this.checkSyntaxFile(filePath);\r\n            });\r\n        });\r\n    }\r\n    static getPythonPath() {\r\n        return this.defaultOptions.pythonPath ? this.defaultOptions.pythonPath : this.defaultPythonPath;\r\n    }\r\n    /**\r\n     * checks syntax without executing code\r\n     * @returns {Promise} rejects w/ stderr if syntax failure\r\n     */\r\n    static checkSyntaxFile(filePath) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const pythonPath = this.getPythonPath();\r\n            let compileCommand = `${pythonPath} -m py_compile ${filePath}`;\r\n            return execPromise(compileCommand);\r\n        });\r\n    }\r\n    /**\r\n     * Runs a Python script and returns collected messages as a promise.\r\n     * If the promise is rejected, the err will probably be of type PythonShellErrorWithLogs\r\n     * @param scriptPath   The path to the script to execute\r\n     * @param options  The execution options\r\n     */\r\n    static run(scriptPath, options) {\r\n        return new Promise((resolve, reject) => {\r\n            let pyshell = new PythonShell(scriptPath, options);\r\n            let output = [];\r\n            pyshell.on('message', function (message) {\r\n                output.push(message);\r\n            }).end(function (err) {\r\n                if (err) {\r\n                    err.logs = output;\r\n                    reject(err);\r\n                }\r\n                else\r\n                    resolve(output);\r\n            });\r\n        });\r\n    }\r\n    ;\r\n    /**\r\n     * Runs the inputted string of python code and returns collected messages as a promise. DO NOT ALLOW UNTRUSTED USER INPUT HERE!\r\n     * @param code   The python code to execute\r\n     * @param options  The execution options\r\n     * @return a promise with the output from the python script\r\n     */\r\n    static runString(code, options) {\r\n        // put code in temp file\r\n        const randomInt = getRandomInt();\r\n        const filePath = os_1.tmpdir + path_1.sep + `pythonShellFile${randomInt}.py`;\r\n        (0, fs_1.writeFileSync)(filePath, code);\r\n        return PythonShell.run(filePath, options);\r\n    }\r\n    ;\r\n    static getVersion(pythonPath) {\r\n        if (!pythonPath)\r\n            pythonPath = this.getPythonPath();\r\n        return execPromise(pythonPath + \" --version\");\r\n    }\r\n    static getVersionSync(pythonPath) {\r\n        if (!pythonPath)\r\n            pythonPath = this.getPythonPath();\r\n        return (0, child_process_1.execSync)(pythonPath + \" --version\").toString();\r\n    }\r\n    /**\r\n     * Parses an error thrown from the Python process through stderr\r\n     * @param  {string|Buffer} data The stderr contents to parse\r\n     * @return {Error} The parsed error with extended stack trace when traceback is available\r\n     */\r\n    parseError(data) {\r\n        let text = '' + data;\r\n        let error;\r\n        if (/^Traceback/.test(text)) {\r\n            // traceback data is available\r\n            let lines = text.trim().split(os_1.EOL);\r\n            let exception = lines.pop();\r\n            error = new PythonShellError(exception);\r\n            error.traceback = data;\r\n            // extend stack trace\r\n            error.stack += os_1.EOL + '    ----- Python Traceback -----' + os_1.EOL + '  ';\r\n            error.stack += lines.slice(1).join(os_1.EOL + '  ');\r\n        }\r\n        else {\r\n            // otherwise, create a simpler error with stderr contents\r\n            error = new PythonShellError(text);\r\n        }\r\n        return error;\r\n    }\r\n    ;\r\n    /**\r\n     * Sends a message to the Python shell through stdin\r\n     * Override this method to format data to be sent to the Python process\r\n     * @returns {PythonShell} The same instance for chaining calls\r\n     */\r\n    send(message) {\r\n        if (!this.stdin)\r\n            throw new Error(\"stdin not open for writing\");\r\n        let data = this.formatter ? this.formatter(message) : message;\r\n        if (this.mode !== 'binary')\r\n            data += os_1.EOL;\r\n        this.stdin.write(data);\r\n        return this;\r\n    }\r\n    ;\r\n    /**\r\n     * Closes the stdin stream. Unless python is listening for stdin in a loop\r\n     * this should cause the process to finish its work and close.\r\n     * @returns {PythonShell} The same instance for chaining calls\r\n     */\r\n    end(callback) {\r\n        if (this.childProcess.stdin) {\r\n            this.childProcess.stdin.end();\r\n        }\r\n        this._endCallback = callback;\r\n        return this;\r\n    }\r\n    ;\r\n    /**\r\n     * Sends a kill signal to the process\r\n     * @returns {PythonShell} The same instance for chaining calls\r\n     */\r\n    kill(signal) {\r\n        this.terminated = this.childProcess.kill(signal);\r\n        return this;\r\n    }\r\n    ;\r\n    /**\r\n     * Alias for kill.\r\n     * @deprecated\r\n     */\r\n    terminate(signal) {\r\n        // todo: remove this next breaking release\r\n        return this.kill(signal);\r\n    }\r\n}\r\nexports.PythonShell = PythonShell;\r\n// starting 2020 python2 is deprecated so we choose 3 as default\r\nPythonShell.defaultPythonPath = process.platform != \"win32\" ? \"python3\" : \"python\";\r\nPythonShell.defaultOptions = {}; //allow global overrides for options\r\n// built-in formatters\r\nPythonShell.format = {\r\n    text: function toText(data) {\r\n        if (!data)\r\n            return '';\r\n        else if (typeof data !== 'string')\r\n            return data.toString();\r\n        return data;\r\n    },\r\n    json: function toJson(data) {\r\n        return JSON.stringify(data);\r\n    }\r\n};\r\n//built-in parsers\r\nPythonShell.parse = {\r\n    text: function asText(data) {\r\n        return data;\r\n    },\r\n    json: function asJson(data) {\r\n        return JSON.parse(data);\r\n    }\r\n};\r\n;\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/python-shell/index.js\n");

/***/ })

};
;